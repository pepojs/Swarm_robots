// Generated by gencpp from file argos_bridge/Position.msg
// DO NOT EDIT!


#ifndef ARGOS_BRIDGE_MESSAGE_POSITION_H
#define ARGOS_BRIDGE_MESSAGE_POSITION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <argos_bridge/Vector3.h>
#include <argos_bridge/Vector3.h>

namespace argos_bridge
{
template <class ContainerAllocator>
struct Position_
{
  typedef Position_<ContainerAllocator> Type;

  Position_()
    : position()
    , orientation()  {
    }
  Position_(const ContainerAllocator& _alloc)
    : position(_alloc)
    , orientation(_alloc)  {
  (void)_alloc;
    }



   typedef  ::argos_bridge::Vector3_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::argos_bridge::Vector3_<ContainerAllocator>  _orientation_type;
  _orientation_type orientation;





  typedef boost::shared_ptr< ::argos_bridge::Position_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::argos_bridge::Position_<ContainerAllocator> const> ConstPtr;

}; // struct Position_

typedef ::argos_bridge::Position_<std::allocator<void> > Position;

typedef boost::shared_ptr< ::argos_bridge::Position > PositionPtr;
typedef boost::shared_ptr< ::argos_bridge::Position const> PositionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::argos_bridge::Position_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::argos_bridge::Position_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::argos_bridge::Position_<ContainerAllocator1> & lhs, const ::argos_bridge::Position_<ContainerAllocator2> & rhs)
{
  return lhs.position == rhs.position &&
    lhs.orientation == rhs.orientation;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::argos_bridge::Position_<ContainerAllocator1> & lhs, const ::argos_bridge::Position_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace argos_bridge

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::argos_bridge::Position_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::argos_bridge::Position_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::argos_bridge::Position_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::argos_bridge::Position_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::argos_bridge::Position_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::argos_bridge::Position_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::argos_bridge::Position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "884731a1adb9599d204c6712c1265f2a";
  }

  static const char* value(const ::argos_bridge::Position_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x884731a1adb9599dULL;
  static const uint64_t static_value2 = 0x204c6712c1265f2aULL;
};

template<class ContainerAllocator>
struct DataType< ::argos_bridge::Position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "argos_bridge/Position";
  }

  static const char* value(const ::argos_bridge::Position_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::argos_bridge::Position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Vector3 position\n"
"Vector3 orientation\n"
"\n"
"================================================================================\n"
"MSG: argos_bridge/Vector3\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
;
  }

  static const char* value(const ::argos_bridge::Position_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::argos_bridge::Position_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position);
      stream.next(m.orientation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Position_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::argos_bridge::Position_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::argos_bridge::Position_<ContainerAllocator>& v)
  {
    s << indent << "position: ";
    s << std::endl;
    Printer< ::argos_bridge::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "orientation: ";
    s << std::endl;
    Printer< ::argos_bridge::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.orientation);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARGOS_BRIDGE_MESSAGE_POSITION_H
