// Generated by gencpp from file argos_bridge/LedsColor.msg
// DO NOT EDIT!


#ifndef ARGOS_BRIDGE_MESSAGE_LEDSCOLOR_H
#define ARGOS_BRIDGE_MESSAGE_LEDSCOLOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/ColorRGBA.h>

namespace argos_bridge
{
template <class ContainerAllocator>
struct LedsColor_
{
  typedef LedsColor_<ContainerAllocator> Type;

  LedsColor_()
    : color()
    , led_number(0)
    , intensity(0)  {
    }
  LedsColor_(const ContainerAllocator& _alloc)
    : color(_alloc)
    , led_number(0)
    , intensity(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::ColorRGBA_<ContainerAllocator>  _color_type;
  _color_type color;

   typedef uint32_t _led_number_type;
  _led_number_type led_number;

   typedef uint8_t _intensity_type;
  _intensity_type intensity;





  typedef boost::shared_ptr< ::argos_bridge::LedsColor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::argos_bridge::LedsColor_<ContainerAllocator> const> ConstPtr;

}; // struct LedsColor_

typedef ::argos_bridge::LedsColor_<std::allocator<void> > LedsColor;

typedef boost::shared_ptr< ::argos_bridge::LedsColor > LedsColorPtr;
typedef boost::shared_ptr< ::argos_bridge::LedsColor const> LedsColorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::argos_bridge::LedsColor_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::argos_bridge::LedsColor_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::argos_bridge::LedsColor_<ContainerAllocator1> & lhs, const ::argos_bridge::LedsColor_<ContainerAllocator2> & rhs)
{
  return lhs.color == rhs.color &&
    lhs.led_number == rhs.led_number &&
    lhs.intensity == rhs.intensity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::argos_bridge::LedsColor_<ContainerAllocator1> & lhs, const ::argos_bridge::LedsColor_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace argos_bridge

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::argos_bridge::LedsColor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::argos_bridge::LedsColor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::argos_bridge::LedsColor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::argos_bridge::LedsColor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::argos_bridge::LedsColor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::argos_bridge::LedsColor_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::argos_bridge::LedsColor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "62998bbed77dd665705d07b81ccc0148";
  }

  static const char* value(const ::argos_bridge::LedsColor_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x62998bbed77dd665ULL;
  static const uint64_t static_value2 = 0x705d07b81ccc0148ULL;
};

template<class ContainerAllocator>
struct DataType< ::argos_bridge::LedsColor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "argos_bridge/LedsColor";
  }

  static const char* value(const ::argos_bridge::LedsColor_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::argos_bridge::LedsColor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/ColorRGBA color\n"
"uint32 led_number\n"
"uint8 intensity\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/ColorRGBA\n"
"float32 r\n"
"float32 g\n"
"float32 b\n"
"float32 a\n"
;
  }

  static const char* value(const ::argos_bridge::LedsColor_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::argos_bridge::LedsColor_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.color);
      stream.next(m.led_number);
      stream.next(m.intensity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LedsColor_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::argos_bridge::LedsColor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::argos_bridge::LedsColor_<ContainerAllocator>& v)
  {
    s << indent << "color: ";
    s << std::endl;
    Printer< ::std_msgs::ColorRGBA_<ContainerAllocator> >::stream(s, indent + "  ", v.color);
    s << indent << "led_number: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.led_number);
    s << indent << "intensity: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.intensity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARGOS_BRIDGE_MESSAGE_LEDSCOLOR_H
