// Generated by gencpp from file argos_bridge/DistScanList.msg
// DO NOT EDIT!


#ifndef ARGOS_BRIDGE_MESSAGE_DISTSCANLIST_H
#define ARGOS_BRIDGE_MESSAGE_DISTSCANLIST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <argos_bridge/DistScan.h>

namespace argos_bridge
{
template <class ContainerAllocator>
struct DistScanList_
{
  typedef DistScanList_<ContainerAllocator> Type;

  DistScanList_()
    : n(0)
    , scan()  {
    }
  DistScanList_(const ContainerAllocator& _alloc)
    : n(0)
    , scan(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _n_type;
  _n_type n;

   typedef std::vector< ::argos_bridge::DistScan_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::argos_bridge::DistScan_<ContainerAllocator> >::other >  _scan_type;
  _scan_type scan;





  typedef boost::shared_ptr< ::argos_bridge::DistScanList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::argos_bridge::DistScanList_<ContainerAllocator> const> ConstPtr;

}; // struct DistScanList_

typedef ::argos_bridge::DistScanList_<std::allocator<void> > DistScanList;

typedef boost::shared_ptr< ::argos_bridge::DistScanList > DistScanListPtr;
typedef boost::shared_ptr< ::argos_bridge::DistScanList const> DistScanListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::argos_bridge::DistScanList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::argos_bridge::DistScanList_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::argos_bridge::DistScanList_<ContainerAllocator1> & lhs, const ::argos_bridge::DistScanList_<ContainerAllocator2> & rhs)
{
  return lhs.n == rhs.n &&
    lhs.scan == rhs.scan;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::argos_bridge::DistScanList_<ContainerAllocator1> & lhs, const ::argos_bridge::DistScanList_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace argos_bridge

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::argos_bridge::DistScanList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::argos_bridge::DistScanList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::argos_bridge::DistScanList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::argos_bridge::DistScanList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::argos_bridge::DistScanList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::argos_bridge::DistScanList_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::argos_bridge::DistScanList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7fb89b86c4713c9df9a68e4b0fd602da";
  }

  static const char* value(const ::argos_bridge::DistScanList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7fb89b86c4713c9dULL;
  static const uint64_t static_value2 = 0xf9a68e4b0fd602daULL;
};

template<class ContainerAllocator>
struct DataType< ::argos_bridge::DistScanList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "argos_bridge/DistScanList";
  }

  static const char* value(const ::argos_bridge::DistScanList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::argos_bridge::DistScanList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 n\n"
"DistScan[] scan\n"
"================================================================================\n"
"MSG: argos_bridge/DistScan\n"
"float32 range\n"
"float32 angle\n"
;
  }

  static const char* value(const ::argos_bridge::DistScanList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::argos_bridge::DistScanList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.n);
      stream.next(m.scan);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DistScanList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::argos_bridge::DistScanList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::argos_bridge::DistScanList_<ContainerAllocator>& v)
  {
    s << indent << "n: ";
    Printer<int32_t>::stream(s, indent + "  ", v.n);
    s << indent << "scan[]" << std::endl;
    for (size_t i = 0; i < v.scan.size(); ++i)
    {
      s << indent << "  scan[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::argos_bridge::DistScan_<ContainerAllocator> >::stream(s, indent + "    ", v.scan[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARGOS_BRIDGE_MESSAGE_DISTSCANLIST_H
