// Generated by gencpp from file argos_bridge/BaseGroundList.msg
// DO NOT EDIT!


#ifndef ARGOS_BRIDGE_MESSAGE_BASEGROUNDLIST_H
#define ARGOS_BRIDGE_MESSAGE_BASEGROUNDLIST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <argos_bridge/BaseGround.h>

namespace argos_bridge
{
template <class ContainerAllocator>
struct BaseGroundList_
{
  typedef BaseGroundList_<ContainerAllocator> Type;

  BaseGroundList_()
    : n(0)
    , baseGrounds()  {
    }
  BaseGroundList_(const ContainerAllocator& _alloc)
    : n(0)
    , baseGrounds(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _n_type;
  _n_type n;

   typedef std::vector< ::argos_bridge::BaseGround_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::argos_bridge::BaseGround_<ContainerAllocator> >::other >  _baseGrounds_type;
  _baseGrounds_type baseGrounds;





  typedef boost::shared_ptr< ::argos_bridge::BaseGroundList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::argos_bridge::BaseGroundList_<ContainerAllocator> const> ConstPtr;

}; // struct BaseGroundList_

typedef ::argos_bridge::BaseGroundList_<std::allocator<void> > BaseGroundList;

typedef boost::shared_ptr< ::argos_bridge::BaseGroundList > BaseGroundListPtr;
typedef boost::shared_ptr< ::argos_bridge::BaseGroundList const> BaseGroundListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::argos_bridge::BaseGroundList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::argos_bridge::BaseGroundList_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::argos_bridge::BaseGroundList_<ContainerAllocator1> & lhs, const ::argos_bridge::BaseGroundList_<ContainerAllocator2> & rhs)
{
  return lhs.n == rhs.n &&
    lhs.baseGrounds == rhs.baseGrounds;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::argos_bridge::BaseGroundList_<ContainerAllocator1> & lhs, const ::argos_bridge::BaseGroundList_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace argos_bridge

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::argos_bridge::BaseGroundList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::argos_bridge::BaseGroundList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::argos_bridge::BaseGroundList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::argos_bridge::BaseGroundList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::argos_bridge::BaseGroundList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::argos_bridge::BaseGroundList_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::argos_bridge::BaseGroundList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "69c1c089ae74b076579a8bd75e220110";
  }

  static const char* value(const ::argos_bridge::BaseGroundList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x69c1c089ae74b076ULL;
  static const uint64_t static_value2 = 0x579a8bd75e220110ULL;
};

template<class ContainerAllocator>
struct DataType< ::argos_bridge::BaseGroundList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "argos_bridge/BaseGroundList";
  }

  static const char* value(const ::argos_bridge::BaseGroundList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::argos_bridge::BaseGroundList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 n\n"
"BaseGround[] baseGrounds\n"
"\n"
"================================================================================\n"
"MSG: argos_bridge/BaseGround\n"
"float32 value\n"
"float32 offset_x\n"
"float32 offset_y\n"
;
  }

  static const char* value(const ::argos_bridge::BaseGroundList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::argos_bridge::BaseGroundList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.n);
      stream.next(m.baseGrounds);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BaseGroundList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::argos_bridge::BaseGroundList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::argos_bridge::BaseGroundList_<ContainerAllocator>& v)
  {
    s << indent << "n: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.n);
    s << indent << "baseGrounds[]" << std::endl;
    for (size_t i = 0; i < v.baseGrounds.size(); ++i)
    {
      s << indent << "  baseGrounds[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::argos_bridge::BaseGround_<ContainerAllocator> >::stream(s, indent + "    ", v.baseGrounds[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARGOS_BRIDGE_MESSAGE_BASEGROUNDLIST_H
