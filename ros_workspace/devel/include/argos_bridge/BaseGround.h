// Generated by gencpp from file argos_bridge/BaseGround.msg
// DO NOT EDIT!


#ifndef ARGOS_BRIDGE_MESSAGE_BASEGROUND_H
#define ARGOS_BRIDGE_MESSAGE_BASEGROUND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace argos_bridge
{
template <class ContainerAllocator>
struct BaseGround_
{
  typedef BaseGround_<ContainerAllocator> Type;

  BaseGround_()
    : value(0.0)
    , offset_x(0.0)
    , offset_y(0.0)  {
    }
  BaseGround_(const ContainerAllocator& _alloc)
    : value(0.0)
    , offset_x(0.0)
    , offset_y(0.0)  {
  (void)_alloc;
    }



   typedef float _value_type;
  _value_type value;

   typedef float _offset_x_type;
  _offset_x_type offset_x;

   typedef float _offset_y_type;
  _offset_y_type offset_y;





  typedef boost::shared_ptr< ::argos_bridge::BaseGround_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::argos_bridge::BaseGround_<ContainerAllocator> const> ConstPtr;

}; // struct BaseGround_

typedef ::argos_bridge::BaseGround_<std::allocator<void> > BaseGround;

typedef boost::shared_ptr< ::argos_bridge::BaseGround > BaseGroundPtr;
typedef boost::shared_ptr< ::argos_bridge::BaseGround const> BaseGroundConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::argos_bridge::BaseGround_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::argos_bridge::BaseGround_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::argos_bridge::BaseGround_<ContainerAllocator1> & lhs, const ::argos_bridge::BaseGround_<ContainerAllocator2> & rhs)
{
  return lhs.value == rhs.value &&
    lhs.offset_x == rhs.offset_x &&
    lhs.offset_y == rhs.offset_y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::argos_bridge::BaseGround_<ContainerAllocator1> & lhs, const ::argos_bridge::BaseGround_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace argos_bridge

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::argos_bridge::BaseGround_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::argos_bridge::BaseGround_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::argos_bridge::BaseGround_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::argos_bridge::BaseGround_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::argos_bridge::BaseGround_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::argos_bridge::BaseGround_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::argos_bridge::BaseGround_<ContainerAllocator> >
{
  static const char* value()
  {
    return "df359e3890070432de3f37977284cdda";
  }

  static const char* value(const ::argos_bridge::BaseGround_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdf359e3890070432ULL;
  static const uint64_t static_value2 = 0xde3f37977284cddaULL;
};

template<class ContainerAllocator>
struct DataType< ::argos_bridge::BaseGround_<ContainerAllocator> >
{
  static const char* value()
  {
    return "argos_bridge/BaseGround";
  }

  static const char* value(const ::argos_bridge::BaseGround_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::argos_bridge::BaseGround_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 value\n"
"float32 offset_x\n"
"float32 offset_y\n"
;
  }

  static const char* value(const ::argos_bridge::BaseGround_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::argos_bridge::BaseGround_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.value);
      stream.next(m.offset_x);
      stream.next(m.offset_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BaseGround_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::argos_bridge::BaseGround_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::argos_bridge::BaseGround_<ContainerAllocator>& v)
  {
    s << indent << "value: ";
    Printer<float>::stream(s, indent + "  ", v.value);
    s << indent << "offset_x: ";
    Printer<float>::stream(s, indent + "  ", v.offset_x);
    s << indent << "offset_y: ";
    Printer<float>::stream(s, indent + "  ", v.offset_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARGOS_BRIDGE_MESSAGE_BASEGROUND_H
